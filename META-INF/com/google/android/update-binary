#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
# 
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
IMG=/data/magisk.img
if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMG=/data/magisk_merge.img
fi
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! $MAGISKBIN isn't setup properly!"
  ui_print "! Please install Magisk v14.0+!"
  ui_print "***********************************"
  exit 1
}

ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility fuctions
. $MAGISKBIN/util_functions.sh
get_outfd

$BOOTMODE && ! is_mounted /magisk && abort "! Magisk is not activated!"
[ ! -f /system/build.prop ] && abort "! /system could not be mounted!"

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# We need busybox/binaries to be setup
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -o "$ZIP" module.prop config.sh 'common/*' -d $INSTALLER 2>/dev/null

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the min magisk version
MIN_VER=`grep_prop template $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."

# Create mod paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

##########################################################################################
# BEGIN MODULE CHANGES
##########################################################################################
# Extract drivers and app.
ui_print "- Extracting module files"
unzip -o "$ZIP" 'drivers/*' 'app/*' -d $INSTALLER 2>/dev/null

# create skeleton files and dirs
ui_print "* Creating files and directories"
mkdir -p $MODPATH/system/lib/soundfx 2>/dev/null
mkdir -p $MODPATH/system/etc 2>/dev/null
mkdir -p $MODPATH/system/vendor/etc 2>/dev/null # maybe I should move this one down to VENDOR_CONFIG block?
mkdir -p $MODPATH/system/priv-app/ViPER4Android 2>/dev/null

# Use variables for paths
APK_PATH=$INSTALLER/app/ViPER4Android.apk
DRIVER_PATH=$INSTALLER/drivers/libv4a_fx_jb_NEON.so

# check if app is present, then copy it.
if [ -f "$APK_PATH" ]; then
	ui_print "* Installing V4A Materialized app"
	cp -af $APK_PATH $MODPATH/system/priv-app/ViPER4Android/ViPER4Android.apk
else
	ui_print "! V4A App is deleted from module!"
	ui_print "! You will have to install the app manually!"
fi

# Check if device is maybe x86 - Atoms, i3/i5/i7 etc.
if [ "$ARCH" = "x86" -o "$ARCH" = "x64" ]; then
	DRIVER_PATH=$INSTALLER/drivers/libv4a_fx_jb_X86.so
else
	# device isn't x86, check if it really is ARM device
	if [ "$ARCH" != "arm" ] && [ "$ARCH" != "arm64" ]; then
		abort "!! Unsupported arch: $ARCH, aborting!"
	fi
fi

# copy driver
if [ -f "$DRIVER_PATH" ]; then
	ui_print "* Copying V4A driver for $ARCH"
	cp -af $DRIVER_PATH $MODPATH/system/lib/soundfx/libv4a_fx_ics.so
else
	abort "!! Driver missing! Aborting!"
fi

# modify configurations
ui_print "* Modifying audio_effects.conf"

CONFIG_FILE=/system/etc/audio_effects.conf
HTC_CONFIG_FILE=/system/etc/htc_audio_effects.conf
VENDOR_CONFIG=/system/vendor/etc/audio_effects.conf

if [ -f "$CONFIG_FILE" ]; then
	ui_print "* Found $CONFIG_FILE, copying and modifying"
	CFG="$MODPATH/$CONFIG_FILE"
	cp -af $CONFIG_FILE $CFG 2>/dev/null
	sed -i 's/^libraries {/libraries {\n  v4a_fx {\n    path \/system\/lib\/soundfx\/libv4a_fx_ics.so\n  }/g' $CFG
	sed -i 's/^effects {/effects {\n  v4a_standard_fx {\n    library v4a_fx\n    uuid 41d3c987-e6cf-11e3-a88a-11aba5d5c51b\n  }/g' $CFG
fi

if [ -f "$HTC_CONFIG_FILE" ]; then
	ui_print "* Found $HTC_CONFIG_FILE, copying and modifying"
	CFG="$MODPATH/$HTC_CONFIG_FILE"
	cp -af $CONFIG_FILE $CFG 2>/dev/null
	sed -i 's/^libraries {/libraries {\n  v4a_fx {\n    path \/system\/lib\/soundfx\/libv4a_fx_ics.so\n  }/g' $CFG
	sed -i 's/^effects {/effects {\n  v4a_standard_fx {\n    library v4a_fx\n    uuid 41d3c987-e6cf-11e3-a88a-11aba5d5c51b\n  }/g' $CFG
fi

if [ -f "$VENDOR_CONFIG" ]; then
	ui_print "* Found $VENDOR_CONFIG, copying and modifying"
	CFG="$MODPATH/$VENDOR_CONFIG"
	cp -af $VENDOR_CONFIG $CFG 2>/dev/null
	sed -i 's/^libraries {/libraries {\n  v4a_fx {\n    path \/system\/lib\/soundfx\/libv4a_fx_ics.so\n  }/g' $CFG
	sed -i 's/^effects {/effects {\n  v4a_standard_fx {\n    library v4a_fx\n    uuid 41d3c987-e6cf-11e3-a88a-11aba5d5c51b\n  }/g' $CFG
fi

##########################################################################################
# END MODULE CHANGES
##########################################################################################

# Handle replace folders
for TARGET in $REPLACE; do
	mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# prop files
$PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/system.prop

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
	# Update info for Magisk Manager
	mktouch /magisk/$MODID/update
	cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh

# service mode scripts
$LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
	ui_print "- Shrinking $IMG to ${newSizeM}M"
	$MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0
